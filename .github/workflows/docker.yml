name: Docker

on:
  push:
    branches: [ master ]
  
jobs:
  build:
    name: Build and test Waltz - postgresql
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:10.6
        env:
          POSTGRES_USER: waltz
          POSTGRES_DB: waltz
          POSTGRES_PASSWORD: waltz
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready -U waltz -d waltz"
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 10

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 8
      uses: actions/setup-java@v2
      with:
        java-version: '8'
        distribution: 'adopt'

    - name: Cache Maven packages    
      uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-m2
        restore-keys: ${{ runner.os }}-m2

    - name: Build with Maven - postgresql
      run: mvn -B clean package -Pwaltz-postgres,docker-postgres --settings settings.xml

    - name: Publish build
      uses: actions/upload-artifact@v2
      with:
        name: waltz-web.war
        path: waltz-web/target/waltz-web.war

    - name: Run containers
      run: docker-compose up --build -d 

    - name: Health check
      timeout-minutes: 5
      run: while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:8080/waltz-web/)" != "200" ]]; do sleep 5; done

    - name: Verify logs
      if: always()
      run: | 
        docker logs $(docker ps -a | grep '8080->8080' | awk '{print $1}')
        docker logs $(docker ps -a | grep '5432->5432' | awk '{print $1}')

  publish:
    name: Push Waltz image - postgresql
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v2
    - run: mkdir -p ./waltz-web/target
    - name: Set up JDK 8
      uses: actions/setup-java@v2
      with:
        java-version: '8'
        distribution: 'adopt'

    - name: Download WAR artifact
      uses: actions/download-artifact@v2
      with:
        name: waltz-web.war
        path: ./waltz-web/target

    - name: Login to GitHub Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push to GitHub Registry - postgresql
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ghcr.io/${{ github.repository }}:postgresql 
